featurePlot(x=training[,c("age","education","jobclass")], y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq+geom_smooth(method='lm',formula=y~x)
cutWage <- cut2(training$wage,g=3)
install.packages("Hmisc")
cutWage <- cut2(training$wage,g=3)
library("Hmisc")
cutWage <- cut2(training$wage,g=3)
cutWage
table(cutWage)
p1 <- qplot(cutWage,age,data=training,fill=cutWage)
p1 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("boxplot"))
p1
p2 <- qplot(cutWage,age,data=training,fill=cutWage,geom=c("botplot","jitter"))
grid.arrange(p1,p2,ncol=2)
library(ggplot)
library(ggplot2)
grid.arrange(p1,p2,ncol=2)
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
prop.table(t1,2)
qplot(wage,colour=education,data=training,geom="density")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training);dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training);dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training);dim(testing)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(testing)
dim(training);dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training);dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
summary(inTrain)
summary(mixtures)
str(mixtures)
str(mixtures)
qplot(CompressiveStrength, data=mixtures, colour=Cement)
gplot(CompressiveStrength, data=mixtures, colour=Cement)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.0.3/library")
gplot(CompressiveStrength, data=mixtures, colour=Cement)
qplot(CompressiveStrength, data=mixtures, colour=Cement)
qplot(CompressiveStrength, data=mixtures)
qplot(mixtures$CompressiveStrength)
plot(CompressiveStrength, data=mixtures)
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength, colour=mixtures$Cement)
plot(mixtures$CompressiveStrength, color=mixtures$Cement)
plot(mixtures$CompressiveStrength, col=mixtures$Cement)
str(mixtures)
plot(mixtures$CompressiveStrength)
mixtures$cut_related <- cut2(mixtures$CompressiveStrength, g = 5)
library("Hmisc", lib.loc="C:/Program Files/R/R-3.0.3/library")
mixtures$cut_related <- cut2(mixtures$CompressiveStrength, g = 5)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$Cement, g = 5)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
str(mixtures)
mixtures$cut_related <- cut2(mixtures$BlastFurnaceSlag, g = 5)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 5)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 3)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 4)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 5)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 6)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 7)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 8)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 9)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$Cement, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$BlastFurnaceSlag, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$Water, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$Superplasticizer, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$CoarseAggregate, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FineAggregate, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$Age, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
mixtures$cut_related <- cut2(mixtures$FlyAsh, g = 2)
plot(mixtures$CompressiveStrength, col = mixtures$cut_related)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer, main="")
str(training)
hist(training$Superplasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?hist
hist(mixtures$SuperPlasticizer)
head(mixtures$SuperPlasticizer)
str(mixtures)
hist(mixtures$Superplasticizer
)
log(1)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(adData)
?grep1
install.packages("grep")
install.packages("base")
?grep
adDataIL<- df[ , grepl( "IL_" , names( df ) ) ]
class(adData)
adDataIL<- adData[ , grepl( "IL_" , names( adData ) ) ]
str(adDataIL)
adDataIL<- adDataIL[,1:12]
str(adDataIL)
modFit = preProcess(adDataIL, method="pca", thresh = 0.80)
print(modFit)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modFit = preProcess(adDataIL, method="pca", thresh = 0.90)
> print(modFit)
modFit = preProcess(adDataIL, method="pca", thresh = 0.90)
print(modFit)
runApp(C:\Users\Thomas\Documents\R\7 - Dev Data Products\HW)
runApp("C:\Users\Thomas\Documents\R\7 - Dev Data Products\HW")
getwd()
runApp(".\7 - Dev Data Products\HW")
runApp("C:/Users/Thomas/Documents/R/7 - Dev Data Products/HW")
library("shiny", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("shinyapps", lib.loc="C:/Program Files/R/R-3.0.3/library")
runApp("C:/Users/Thomas/Documents/R/7 - Dev Data Products/HW")
runApp("C:/Users/Thomas/Documents/R/7 - Dev Data Products/HW")
runExample("07_widgets")
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
paste("a","b","c", sep="",collapse=NULL)
EI <- E
EI <- "E"
SN <- "S"
TF <- "T"
JP <- "J"
paste(EI, SN, TF, JP, sep="", collapse=NULL)
var <- paste(EI, SN, TF, JP, sep="", collapse=NULL)
var == "E"
grep1("E",var)
?grep
grep("E",var)
grep("R",var)
install.packages("grep1")
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
yesno <- function(var) if (grep(var,"ESTJ")==TRUE) {
ans <- "Yes"
} else {
ans <- "No"
}
yesno("P")
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
grep1
?grep1
?grep
grep1
?grep1
?grepl
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
trait <- function(x) if (x == E) {return "Extroverted"}
else {if (x == "I") {return "Introverted"}}
else {if (x == "S") {return "Sensing"}}
else {if (x == "N") {return "Intuition"}}
else {if (x == "T") {return "Thinking"}}
else {if (x == "F") {return "Feeling"}}
else {if (x == "J") {return "Judging"}}
else {if (x == "P") {return "Perceiving"}}
trait <- function(x) if (x == E) {
return "Extroverted"
} else if (x == "I") {return "Introverted"
} else if (x == "S") {return "Sensing"
} else if (x == "N") {return "Intuition"
} else if (x == "T") {return "Thinking"
} else if (x == "F") {return "Feeling"
} else if (x == "J") {return "Judging"
} else if (x == "P") {return "Perceiving"
}
trait <- function(x) if (x == E) {
ans <-  "Extroverted"
} else if (x == "I") {ans <-  "Introverted"
} else if (x == "S") {ans <-  "Sensing"
} else if (x == "N") {ans <-  "Intuition"
} else if (x == "T") {ans <-  "Thinking"
} else if (x == "F") {ans <-  "Feeling"
} else if (x == "J") {ans <-  "Judging"
} else if (x == "P") {ans <-  "Perceiving"
}
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
?pageWithSidebar
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
shiny::runApp('7 - Dev Data Products/HW')
library("slidify", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("slidifyLibraries", lib.loc="C:/Program Files/R/R-3.0.3/library")
widgets     : [mathjax]            # {mathjax, quiz, bootstrap}
logo        :
---
title       : Mini Myers-Briggs Shiny App
subtitle    : Data Product
author      : datasciencefan
job         : Data Analyst
logo        :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
url:
lib: ../../librariesNew
assets: ../../assets
widgets     : [mathjax]            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
## Shiny revisited
* In the last lecture, we covered basic creation of
Shiny applications
* If you tried it and are like most, you had an easy time with `ui.R`
but a harder time with `server.R`
* In this lecture, we cover some more of the details of shiny
* Since writing the last lecture, a more detailed tutorial has
been created that is worth checking out
(http://shiny.rstudio.com/tutorial/)
---
## Details
* Code that you put before `shinyServer` in the `server.R` function gets
called once when you do `runApp()`
* Code inside the unnamed function of `shinyServer(function(input, output){` but
not in a reactive statement will run once for every new user (or page refresh)
* Code in reactive functions of `shinyServer` get run repeatedly as needed
when new values are entered (reactive functions are those like `render*`)
---
### Experiment (code in the slidify document)
`ui.R`
```
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3'),
p('Outside text'),
textOutput('text4'),
p('Inside text, but non-reactive'),
textOutput('text5')
)
))
```
---
`server.R`
Set `x <- 0` before running
```
library(shiny)
x <<- x + 1
y <<- 0
shinyServer(
function(input, output) {
y <<- y + 1
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({as.numeric(input$text1)+1})
output$text4 <- renderText(y)
output$text5 <- renderText(x)
}
)
```
---
## Try it
* type `runApp()`
* Notice hitting refresh incriments `y` but enterting values in the textbox does not
* Notice `x` is always 1
* Watch how it updated `text1` and `text2` as needed.
* Doesn't add 1 to text1 every time a new `text2` is input.
* *Important* try `runApp(display.mode='showcase')`
---
## Reactive expressions
* Sometimes to speed up your app, you want reactive operations (those operations that depend on widget input values) to be performed outside of a `render*`1 statement
* For example, you want to do some code that gets reused in several
`render*` statements and don't want to recalculate it for each
* The `reactive` function is made for this purpose
---
## Example
`server.R`
```
shinyServer(
function(input, output) {
x <- reactive({as.numeric(input$text1)+100})
output$text1 <- renderText({x()                          })
output$text2 <- renderText({x() + as.numeric(input$text2)})
}
)
```
---
## As opposed to
```
shinyServer(
function(input, output) {
output$text1 <- renderText({as.numeric(input$text1)+100  })
output$text2 <- renderText({as.numeric(input$text1)+100 +
as.numeric(input$text2)})
}
)
```
---
## Discussion
* Do `runApp(display.mode='showcase')`
* (While inconsequential) the second example has to add 100 twice every time
text1 is updated for the second set of code
* Also note the somewhat odd syntax for reactive variables
---
## Non-reactive reactivity (what?)
* Sometimes you don't want shiny to immediately perform reactive
calculations from widget inputs
* In other words, you want something like a submit button
---
## ui.R
```
shinyUI(pageWithSidebar(
headerPanel("Hello Shiny!"),
sidebarPanel(
textInput(inputId="text1", label = "Input Text1"),
textInput(inputId="text2", label = "Input Text2"),
actionButton("goButton", "Go!")
),
mainPanel(
p('Output text1'),
textOutput('text1'),
p('Output text2'),
textOutput('text2'),
p('Output text3'),
textOutput('text3')
)
))
```
---
## Server.R
```
shinyServer(
function(input, output) {
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({
input$goButton
isolate(paste(input$text1, input$text2))
})
}
)
```
---
## Try it out
* Notice it doesn't display output `text3` until the go button is pressed
* `input$goButton` (or whatever you named it) gets increased by one for every
time pushed
* So, when in reactive code (such as `render` or `reactive`) you can use conditional statements like below to only execute code on the first button press or to not execute code until the first or subsequent button press
```if (input$goButton == 1){  Conditional statements }```
---
## Example
Here's some replaced code from our previous `server.R`
```
output$text3 <- renderText({
if (input$goButton == 0) "You have not pressed the button"
else if (input$goButton == 1) "you pressed it once"
else "OK quit pressing it"
})
```
---
## More on layouts
* The sidebar layout with a main panel is the easiest.
* Using `shinyUI(fluidpage(` is much more flexible and allows
tighter access to the bootstrap styles
* Examples here (http://shiny.rstudio.com/articles/layout-guide.html)
* `fluidRow` statements create rows and then the `column` function
from within it can create columns
* Tabsets, navlists and navbars can be created for more complex apps
---
### Directly using html
* For more complex layouts, direct use of html is preferred
(http://shiny.rstudio.com/articles/html-ui.html)
* Also, if you know web development well, you might find using
R to create web layouts kind of annoying
* Create a directory called `www` in the same directory with `server.R`
* Have an `index.html` page in that directory
* Your named input variables will be passed to `server.R`
`<input type="number" name="n" value="500" min="1" max="1000" />`
* Your `server.R` output will have class definitions of the form `shiny-`
`<pre id="summary" class="shiny-text-output"></pre>`
---
## Debugging techniques for Shiny
* Debugging shiny apps can be tricky
* We saw that `runApp(displayMode = 'showcase')` highlights execution while a
shiny app runs
* Using `cat` in your code displays output to stdout (so R console)
* The `browser()` function can interupt execution and can be called conditionally
(http://shiny.rstudio.com/articles/debugging.html)
hitheme     : tomorrow      #
getwd()
setwd("C:\Users\Thomas\Documents\GitHub\Dev Data Products")
setwd("C:/Users/Thomas/Documents/GitHub/Dev Data Products")
slidify("index.Rmd")
browseURL("index.html")
setwd("~/sample/project/")
setwd("./sample/project/")
publish()
